AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Unified BugTracker System - SAM Template
  Implements the unified DynamoDB schema for cross-system bug tracking

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    AllowedValues:
      - dev
      - staging
      - prod

  SlackBotToken:
    Type: String
    NoEcho: true
    Description: Slack Bot Token for API access

  SlackChannelId:
    Type: String
    Description: Slack Channel ID for monitoring

  ZendeskSubdomain:
    Type: String
    Description: Zendesk subdomain

  ZendeskEmail:
    Type: String
    Description: Zendesk email for API access

  ZendeskApiToken:
    Type: String
    NoEcho: true
    Description: Zendesk API Token

  ShortcutApiToken:
    Type: String
    NoEcho: true
    Description: Shortcut API Token

Resources:
  # DynamoDB Table with Unified Schema
  BugTrackerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BugTracker-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: priority
          AttributeType: S
        - AttributeName: state
          AttributeType: S
        - AttributeName: sourceSystem
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: priority-index
          KeySchema:
            - AttributeName: priority
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: state-index
          KeySchema:
            - AttributeName: state
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: source-index
          KeySchema:
            - AttributeName: sourceSystem
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: unified-bug-tracking

  # Lambda Function for Data Ingestion
  BugTrackerIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "BugTrackerIngestion-${Environment}"
      CodeUri: ../lambdas/
      Handler: bug_tracker_ingestion.lambda_handler
      Runtime: python3.9
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BugTrackerTable
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref BugTrackerTable
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_CHANNEL_ID: !Ref SlackChannelId
          ZENDESK_SUBDOMAIN: !Ref ZendeskSubdomain
          ZENDESK_EMAIL: !Ref ZendeskEmail
          ZENDESK_API_TOKEN: !Ref ZendeskApiToken
          SHORTCUT_API_TOKEN: !Ref ShortcutApiToken
      Events:
        ScheduledIngestion:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Name: !Sub "BugTrackerIngestion-${Environment}"
            Description: "Scheduled data ingestion for BugTracker"
            Enabled: true

  # Lambda Function for Manual Bug Linking
  BugTrackerLinkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "BugTrackerLinker-${Environment}"
      CodeUri: ../lambdas/
      Handler: bug_tracker_linker.lambda_handler
      Runtime: python3.9
      Timeout: 300
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BugTrackerTable
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref BugTrackerTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /link-bugs
            Method: post

  # Lambda Function for Querying Bugs
  BugTrackerQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "BugTrackerQuery-${Environment}"
      CodeUri: ../lambdas/
      Handler: bug_tracker_query.lambda_handler
      Runtime: python3.9
      Timeout: 300
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BugTrackerTable
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          DYNAMODB_TABLE: !Ref BugTrackerTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /query-bugs
            Method: get

  # API Gateway
  BugTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # CloudWatch Log Group for Lambda Functions
  BugTrackerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/BugTracker-${Environment}"
      RetentionInDays: 30

  # SNS Topic for Notifications
  BugTrackerNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "BugTrackerNotifications-${Environment}"
      DisplayName: !Sub "BugTracker Notifications - ${Environment}"

  # CloudWatch Alarm for High Priority Bugs
  HighPriorityBugAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "HighPriorityBugs-${Environment}"
      AlarmDescription: "Alert when high priority bugs exceed threshold"
      MetricName: HighPriorityBugCount
      Namespace: BugTracker
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref BugTrackerNotificationTopic

Outputs:
  BugTrackerTableName:
    Description: "Name of the BugTracker DynamoDB table"
    Value: !Ref BugTrackerTable
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  BugTrackerTableArn:
    Description: "ARN of the BugTracker DynamoDB table"
    Value: !GetAtt BugTrackerTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TableArn"

  BugTrackerIngestionFunctionArn:
    Description: "ARN of the BugTracker ingestion Lambda function"
    Value: !GetAtt BugTrackerIngestionFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-IngestionFunctionArn"

  BugTrackerApiUrl:
    Description: "URL of the BugTracker API Gateway"
    Value: !Sub "https://${BugTrackerApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  BugTrackerNotificationTopicArn:
    Description: "ARN of the BugTracker notification SNS topic"
    Value: !Ref BugTrackerNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-NotificationTopicArn"


